#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using System.Linq;
using System.IO;
using System.Text.RegularExpressions;


string[] lines = File.ReadAllLines("input.txt");
int rowsAbove = 0;
int columnsLeft = 0;
int patternBeginIndex = 0;
string previousLine = string.Empty;
string previousColumn = string.Empty;

const bool EnableSmudgeCorrection = true;

List<List<string>> GetPatterns(string[] lines)
{
    List<List<string>> patterns = new();
    patterns.Add(new List<string>());
    for (int i = 0; i < lines.Length; i++)
    {
        if (lines[i] == string.Empty)
        {
            patterns.Add(new List<string>());
            continue;
        }
        
        patterns.Last().Add(lines[i]);
    }

    return patterns;
}

List<string> Pivot(List<string> lines)
{
    List<string> pivoted = new();
    for (int i = 0; i < lines.First().Length; i++)
    {
        StringBuilder sb = new();
        for (int j = 0; j < lines.Count; j++)
        {
            sb.Append(lines[j][i]);
        }

        pivoted.Add(sb.ToString());
    }

    return pivoted;
}

List<List<string>> rowPatterns = GetPatterns(lines);
List<List<string>> columnPatterns = rowPatterns.Select(r => Pivot(r)).ToList();

List<int> matchedIndexes = new List<int>();
for (int i = 0; i < rowPatterns.Count; i++)
{
    int count = FindCount(rowPatterns[i], EnableSmudgeCorrection);
    if (count > 0)
    {
        matchedIndexes.Add(i);
    }

    rowsAbove += count;
}

for (int i = 0; i < columnPatterns.Count; i++)
{
    if (matchedIndexes.Contains(i))
    {
        continue;
    }

    columnsLeft += FindCount(columnPatterns[i], EnableSmudgeCorrection);
}

int FindCount(List<string> pattern, bool smudgeCorrection)
{
    string previous = string.Empty;
    for (int i = 0; i < pattern.Count; i++)
    {
        bool found = false;
        bool smudgeFound = false;
        for (int n1 = i, n2 = i - 1; n1 < pattern.Count && n2 >= 0; n1++, n2--)
        {
            if (pattern[n1] == pattern[n2])
            {
                found = true;
            }
            else
            {
                if (smudgeCorrection && !smudgeFound)
                {
                    List<int> differences = pattern[n1].Zip(pattern[n2], (first, second) => first == second ? 0 : 1).ToList();
                    if (differences.Sum() == 1)
                    {
                        found = true;
                        smudgeFound = true;
                    }
                    else
                    {
                        found = false;
                        break;
                    }
                }
                else
                {
                    found = false;
                    break;
                }
            }
        }

        if (found && smudgeFound)
        {
            return i;
        }
    }

    return 0;
}

columnsLeft + rowsAbove * 100
