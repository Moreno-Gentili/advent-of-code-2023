#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "nuget: System.Drawing.Common, 8.0.0"

using System.Linq;
using System.IO;
using System.Text.RegularExpressions;
using System.Drawing;

Regex gear = new Regex(@"\*");
Regex part = new Regex(@"(\d+)");

string[] lines = System.IO.File.ReadAllLines("input.txt");
List<(Rectangle Area, int Part)> parts = (
    from rowIndex in Enumerable.Range(0, lines.Length)
    let matches = part.Matches(lines[rowIndex])
    from match in matches
    from gr in match.Groups.Cast<Group>().Skip(1)
    let columnIndex = gr.Index
    let neighboorhood = new Rectangle(columnIndex - 1, rowIndex - 1, gr.Value.Length + 2, 3)
    select (neighboorhood, int.Parse(gr.Value))).ToList();

List<Point> gears = (
    from rowIndex in Enumerable.Range(0, lines.Length)
    let matches = gear.Matches(lines[rowIndex])
    from match in matches
    let columnIndex = match.Groups[0].Index
    select new Point(columnIndex, rowIndex)
).ToList();

IEnumerable<int> ratios =
    from gear in gears
    let parts = parts.Where(p => p.Area.Contains(gear)).ToList()
    where parts.Count == 2
    let ratio = parts[0].Part * parts[1].Part
    select ratio;

ratios.Sum()
