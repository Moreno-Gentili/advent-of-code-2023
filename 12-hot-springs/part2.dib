#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using System.Text.RegularExpressions;
using System.IO;

record Test(string Pattern, Memory<int> Groups, int GroupsSum, int Offset);

const char Separator = '.';
const char BrokenSpring = '#';
const char Wildcard = '?';

string[] lines = File.ReadAllLines("input.txt");

List<Regex> matchers = new(
    from count in Enumerable.Range(0, 20)
    select new Regex(@"(?=(?:\.|\?)(?:#|\?){" + count.ToString() + @"}(?:\.|\?))"));

IEnumerable<long> combinations =
    from line in lines
    let repetitions = 5
    let parts = line.Split(' ')
    let pattern = $".{string.Join(Wildcard, Enumerable.Repeat(parts[0], repetitions))}."
    let groups = $"{string.Join(",", Enumerable.Repeat(parts[1], repetitions))}".Split(',').Select(int.Parse).ToArray()
    let cache = new Dictionary<(int Offset, int ResidualGroups), long>()
    select GetCombinations(new Test(pattern, groups, groups.Sum(), 0), cache);

long GetCombinations(Test test, Dictionary<(int Offset, int ResidualGroups), long> cache)
{
    (int Offset, int ResidualGroups) cacheKey = (test.Offset, test.Groups.Length);
    if (cache.TryGetValue(cacheKey, out long combinations))
    {
        return combinations;
    }

    int group = test.Groups.Span[0];
    Regex matcher = matchers[group];
    Memory<int> nextGroups = test.Groups[1..];
    bool isLastOne = nextGroups.Length == 0;
    int nextGroupsSum = test.GroupsSum - group;

    Dictionary<string, int> nextPatterns = new();

    int minimumNeededToComplete = nextGroupsSum + nextGroups.Length - 1;
    int upperBound = test.Pattern.Length - minimumNeededToComplete - 1;
    string subPattern = test.Pattern[test.Offset..upperBound];

    int hashIndex = subPattern.IndexOf(BrokenSpring);
    if (hashIndex >= 0)
    {
        if (!isLastOne && hashIndex < (subPattern.Length - 1))
        {
            int maxIndex = Math.Min(subPattern.Length, hashIndex + group);            
            do
            {
                hashIndex++;
            }
            while(hashIndex < maxIndex && subPattern[hashIndex] != Separator);

            upperBound = test.Offset + hashIndex + 1;
            subPattern = test.Pattern[test.Offset..upperBound];
        }
    }

    List<int> indexes = matcher.Matches(subPattern).Cast<Match>().Select(m => m.Index).ToList();
    foreach (int index in indexes)
    {
        int start = index + test.Offset;
        int length = group + 2;
        int secondPart = start + length;
        string nextPattern = $"{test.Pattern[0..start]}.{group.ToString().PadRight(group, '.')}.{test.Pattern[secondPart..]}";
        nextPatterns.TryAdd(nextPattern, start + length - 1);
    }

    long sum;
    if (isLastOne)
    {
        sum = nextPatterns.Where(p => !p.Key.Contains(BrokenSpring)).Count();
    }
    else
    {
        sum = (
            from entry in nextPatterns
            let nextTest = new Test(entry.Key, nextGroups, nextGroupsSum, entry.Value)
            select GetCombinations(nextTest, cache)).Sum();
    }

    cache.Add(cacheKey, sum);
    return sum;
}

combinations.AsParallel().Sum()
